#######################
# MODALDECOMP LIBRARY #
#######################

add an option for svd thresholding in DMD.  when the svd singular values are
ill-conditioned, then the resulting computation results can be invalid.  for
instance the mode norms may come out negative...(when computed using
coefficients rather than the modes themselves).

modaldecomp objects shouldn't own the MPI instance in the way they currently
do. Really MPI is common to everything in the program, and so shouldn't be
contained  only within this class. An instance of the MPI class, or whatever form
the MPI takes if not a class, it should be available to 
everything.
Another way of dealing with this would be to pass an MPI class instance to
modaldecomp objects. Then the class would only be able to use the processors
in the MPI class and functions defined in it. In this way multiple MPI
instances could exist and be consistent. This does require the user who
writes a main function to at least create a single MPI class instance. 


Change snapNum and similar to snapIndex. This is because the "number" of a 
mode is generally different than its index. The most common example of this
is the first mode is called mode number 1 but has index 0 (indexFrom=1). To
be clear, I differentiate between a mode number and mode index. To be consistent
with all naming conventions, index should be used instead of num when 
referring to some object's "number/index" internally and starting from 0. 
Number is more of a name, index is hidden from the user and starts from 0.
  - This has been done for modaldecomp and bpod, and their tests. All
  future code should make the distinction between xxxNum and xxxIndex
  notation.


The tests for DMD should be updated so that we check that the internal POD
object has the correct arguments passed to it.


Write the POD object and tests for POD.


Write tests directly for _lin_combine_fields in modaldecomp. Right now only
_compute_modes is tested. This isn't that bad since _compute_modes is mostly
a wrapper for _lin_combine_fields, but it would be ideal to test it
individually as well. 


Profiling with cProfile could expose potentially easy speed increases.
However, some of these results could be dependent on the user's use of
the library, we shouldn't optimize for a particular case at expense of other
cases.

Sphinx documentation. We tried to follow the right format, so this should
be just a matter of cleaning up comments and formats, and learning to use
sphinx.


Automatically detect the maxSnapsPerNode. This would require some
fancier things, like determining the available RAM and the size of a snapshot
object. It might not be possible since some memory is used by the snap/mode
objects when doing inner products, etc. We could leave a safety factor though,
and maybe leave space for 1-2 snaps/modes for scratch space for the user's
functions. 


#################
## ROM LIBRARY ##
#################

This is a separate library that would compute ROMs. It would interact
well with modaldecomp when necessary (for example for BPOD). The main idea
is that there would be a base class that defined mostly the interface, and
derived classes that would implement computing the ROM ODEs for a 
specific PDE. The easiest example would be computing a ROM that is an LTI
system with:
dx/dt = Ax + Bu
y = Cx (+ Du)
This has been done (by Brandt) for the BPOD case (see bpodltirom.py).
The A, B, and C matrices
are computed, given the direct modes, the adjoint modes, and the direct
modes advanced one small time step (these are used to calculate the time-
derivatives of the direct modes via finite difference).
More thought needs to be put into this before it is attempted, but it might
be able to handle general PDEs and general forms of the ROM.




